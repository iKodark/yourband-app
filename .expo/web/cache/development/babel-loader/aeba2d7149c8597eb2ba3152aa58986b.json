{"ast":null,"code":"import axios from \"axios\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { getToken } from \"./AsyncStorage\";\nvar api = axios.create({\n  baseURL: \"http://192.168.0.14:9000/api\",\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json'\n  }\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  console.log('ERROR SERVICE', error);\n\n  if (error.request._hasError === true && error.request._response.includes('connect')) {\n    Alert.alert('Aviso', 'Não foi possível conectar aos nossos servidores, sem conexão a internet', [{\n      text: 'OK'\n    }], {\n      cancelable: false\n    });\n  }\n\n  if (error.response.status === 401) {\n    var requestConfig = error.config;\n    return axios(requestConfig);\n  }\n\n  return Promise.reject(error);\n});\napi.interceptors.request.use(function (config) {\n  return getToken().then(function (token) {\n    if (token) config.headers['x-access-token'] = \"\" + token;\n    return Promise.resolve(config);\n  }).catch(function (error) {\n    console.log(error);\n    return Promise.resolve(config);\n  });\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"sources":["C:/Projects/YourBand/yourband-app/src/Services/Api.js"],"names":["axios","getToken","api","create","baseURL","headers","Accept","interceptors","response","use","error","console","log","request","_hasError","_response","includes","Alert","alert","text","cancelable","status","requestConfig","config","Promise","reject","then","token","resolve","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,SAASC,QAAT;AAEA,IAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE,8BADc;AAEvBC,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT;AAEPC,IAAAA,MAAM,EAAE;AAFD;AAFc,CAAb,CAAZ;AAQAJ,GAAG,CAACK,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,CACE,UAAAD,QAAQ,EAAI;AAIV,SAAOA,QAAP;AACD,CANH,EAOE,UAAAE,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;;AAMA,MACEA,KAAK,CAACG,OAAN,CAAcC,SAAd,KAA4B,IAA5B,IACAJ,KAAK,CAACG,OAAN,CAAcE,SAAd,CAAwBC,QAAxB,CAAiC,SAAjC,CAFF,EAGE;AACAC,IAAAA,KAAK,CAACC,KAAN,CACE,OADF,EAEE,yEAFF,EAGE,CAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAF,CAHF,EAIE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAJF;AAMD;;AAED,MAAIV,KAAK,CAACF,QAAN,CAAea,MAAf,KAA0B,GAA9B,EAAmC;AACjC,QAAMC,aAAa,GAAGZ,KAAK,CAACa,MAA5B;AAQA,WAAOvB,KAAK,CAACsB,aAAD,CAAZ;AACD;;AAED,SAAOE,OAAO,CAACC,MAAR,CAAef,KAAf,CAAP;AACD,CAvCH;AA0CAR,GAAG,CAACK,YAAJ,CAAiBM,OAAjB,CAAyBJ,GAAzB,CACE,UAAAc,MAAM,EAAI;AACR,SAAOtB,QAAQ,GACZyB,IADI,CACC,UAAAC,KAAK,EAAI;AACb,QAAIA,KAAJ,EACEJ,MAAM,CAAClB,OAAP,CAAe,gBAAf,SAAsCsB,KAAtC;AACF,WAAOH,OAAO,CAACI,OAAR,CAAgBL,MAAhB,CAAP;AACD,GALI,EAMJM,KANI,CAME,UAAAnB,KAAK,EAAI;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAOc,OAAO,CAACI,OAAR,CAAgBL,MAAhB,CAAP;AACD,GATI,CAAP;AAUD,CAZH,EAaE,UAAAb,KAAK,EAAI;AACP,SAAOc,OAAO,CAACC,MAAR,CAAef,KAAf,CAAP;AACD,CAfH;AAkBA,eAAeR,GAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { Alert } from 'react-native'\r\n\r\nimport { getToken } from './AsyncStorage';\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://192.168.0.14:9000/api\",\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n  },\r\n});\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n\r\n    // Do something with response data\r\n\r\n    return response\r\n  },\r\n  error => {\r\n    console.log('ERROR SERVICE', error);\r\n    // Do something with response error\r\n\r\n    // You can even test for a response code\r\n    // and try a new request before rejecting the promise\r\n\r\n    if (\r\n      error.request._hasError === true &&\r\n      error.request._response.includes('connect')\r\n    ) {\r\n      Alert.alert(\r\n        'Aviso',\r\n        'Não foi possível conectar aos nossos servidores, sem conexão a internet',\r\n        [ { text: 'OK' } ],\r\n        { cancelable: false },\r\n      )\r\n    }\r\n\r\n    if (error.response.status === 401) {\r\n      const requestConfig = error.config\r\n\r\n      // O token JWT expirou\r\n\r\n      // deleteUser().then(() => {\r\n      //   navigate('AuthLoading', {})\r\n      // })\r\n\r\n      return axios(requestConfig)\r\n    }\r\n\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\napi.interceptors.request.use(\r\n  config => {\r\n    return getToken()\r\n      .then(token => {\r\n        if (token)\r\n          config.headers['x-access-token'] = `${token}`\r\n        return Promise.resolve(config)\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        return Promise.resolve(config)\r\n      })\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\nexport default api;"]},"metadata":{},"sourceType":"module"}