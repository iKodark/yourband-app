{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Projects\\\\YourBand\\\\yourband-app\\\\src\\\\Components\\\\Input\\\\index.js\";\nimport React, { useRef, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { colors, fonts } from \"../../Styles\";\nimport styles from \"./styles\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport * as Animatable from 'react-native-animatable';\nvar AnimatedIcon = Animatable.createAnimatableComponent(Icon);\nexport default function Input(_ref) {\n  var name = _ref.name,\n      label = _ref.label,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      onTouch = _ref.onTouch,\n      error = _ref.error,\n      errorStyle = _ref.errorStyle,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"label\", \"value\", \"onChange\", \"onTouch\", \"error\", \"errorStyle\"]);\n\n  var InputRef = useRef();\n  var LabelRef = useRef();\n\n  var onChangeText = function onChangeText(text) {\n    onChange(name, text);\n  };\n\n  var _onFocus = function onFocus() {\n    InputRef.current.transitionTo({\n      borderColor: colors.primary\n    });\n    setTimeout(function () {\n      LabelRef.current.transitionTo({\n        top: 0\n      });\n      LabelRef.current.transitionTo({\n        left: 0\n      });\n      LabelRef.current.transitionTo({\n        fontSize: fonts.regular\n      });\n    });\n  };\n\n  var _onBlur = function onBlur() {\n    onTouch(name);\n    InputRef.current.transitionTo({\n      borderColor: colors.transparent\n    });\n    setTimeout(function () {\n      LabelRef.current.transitionTo({\n        top: value.length > 0 || value === undefined || value == null ? 0 : 20\n      });\n      LabelRef.current.transitionTo({\n        left: value.length > 0 || value === undefined || value == null ? 0 : 5\n      });\n      LabelRef.current.transitionTo({\n        fontSize: value.length > 0 || value === undefined || value == null ? fonts.regular : fonts.input\n      });\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.textValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, error ? React.createElement(Animatable.Text, {\n    style: {\n      color: colors.danger\n    },\n    animation: \"bounceIn\",\n    useNativeDriver: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, error) : null)), React.createElement(Animatable.View, {\n    style: styles.content,\n    ref: InputRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, label && React.createElement(Animatable.Text, {\n    style: styles.label,\n    ref: LabelRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, label), React.createElement(TextInput, _extends({\n    style: styles.input,\n    onChangeText: onChangeText,\n    onFocus: function onFocus() {\n      return _onFocus();\n    },\n    onBlur: function onBlur() {\n      return _onBlur();\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })), error ? React.createElement(View, {\n    style: styles.iconValidation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, React.createElement(AnimatedIcon, {\n    name: \"exclamation-circle\",\n    size: 20,\n    color: colors.danger,\n    animation: \"bounceIn\",\n    useNativeDriver: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  })) : null));\n}","map":{"version":3,"sources":["C:/Projects/YourBand/yourband-app/src/Components/Input/index.js"],"names":["React","useRef","useState","colors","fonts","styles","Icon","Animatable","AnimatedIcon","createAnimatableComponent","Input","name","label","value","onChange","onTouch","error","errorStyle","rest","InputRef","LabelRef","onChangeText","text","onFocus","current","transitionTo","borderColor","primary","setTimeout","top","left","fontSize","regular","onBlur","transparent","length","undefined","input","textValidation","color","danger","content","iconValidation"],"mappings":"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","sourcesContent":["import React, { useRef, useState }  from 'react';\r\nimport { Text, TextInput, Animated, View } from 'react-native';\r\nimport { colors, fonts } from '../../Styles';\r\n\r\nimport styles from './styles';\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\nimport * as Animatable from 'react-native-animatable';\r\n\r\nconst AnimatedIcon = Animatable.createAnimatableComponent(Icon);\r\n\r\nexport default function Input({\r\n  name,\r\n  label,\r\n  value,\r\n  onChange,\r\n  onTouch,\r\n  error,\r\n  errorStyle,\r\n  ...rest\r\n}) {\r\n\r\n  const InputRef = useRef();\r\n  const LabelRef = useRef();\r\n\r\n  const onChangeText = text => {\r\n    onChange(name, text);\r\n  };\r\n\r\n  const onFocus = () => {\r\n    \r\n    InputRef.current.transitionTo({ borderColor: colors.primary });\r\n\r\n    setTimeout(() => {\r\n      LabelRef.current.transitionTo({ top: 0 });\r\n      LabelRef.current.transitionTo({ left: 0 });\r\n      LabelRef.current.transitionTo({ fontSize: fonts.regular });\r\n    });\r\n  };\r\n\r\n  const onBlur = () => {\r\n\r\n    onTouch(name);\r\n\r\n    InputRef.current.transitionTo({ borderColor: colors.transparent });\r\n\r\n    setTimeout(() => {\r\n      LabelRef.current.transitionTo({ top: value.length > 0 || value === undefined || value == null ? 0 : 20 });\r\n      LabelRef.current.transitionTo({ left: value.length > 0 || value === undefined || value == null ? 0 : 5 });\r\n      LabelRef.current.transitionTo({ fontSize: value.length > 0 || value === undefined || value == null ? fonts.regular : fonts.input });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <View>\r\n\r\n        \r\n          <View style={ styles.textValidation }>\r\n            {error ? (\r\n              <Animatable.Text\r\n                style={{ color: colors.danger }}\r\n                animation=\"bounceIn\"\r\n                useNativeDriver\r\n              >\r\n                { error }\r\n              </Animatable.Text>\r\n            ) : null}\r\n          </View>\r\n        \r\n\r\n      </View>\r\n      <Animatable.View style={ styles.content } ref={InputRef}>\r\n\r\n          { label &&\r\n            <Animatable.Text\r\n              style={ styles.label }\r\n              ref={LabelRef}\r\n            >\r\n              {label}\r\n            </Animatable.Text>\r\n          }\r\n\r\n          <TextInput\r\n            style={styles.input}\r\n            onChangeText={ onChangeText }\r\n            onFocus={() => onFocus()}\r\n            onBlur={() => onBlur()}\r\n            {...rest}\r\n          />\r\n\r\n          {error ? (\r\n            <View style={ styles.iconValidation }>\r\n              <AnimatedIcon\r\n                name=\"exclamation-circle\"\r\n                size={20}\r\n                color={colors.danger}\r\n                animation=\"bounceIn\"\r\n                useNativeDriver\r\n              />\r\n            </View>\r\n          ) : null}\r\n\r\n      </Animatable.View>\r\n    </>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}